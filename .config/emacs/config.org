#+title: Flandre config

* Packages
#+BEGIN_SRC emacs-lisp
  ;; Set up package.el to work with MELPA

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
          use-package-expand-minimally t))
#+END_SRC
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+end_src
** Org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Documents/Org")
	org-priority-highest 1
	org-priority-lowest 10
	org-priority-default 10)
  (custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.30))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.20))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.10)))))
    (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
*** Org Babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src
** Org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-directory (file-truename "~/Documents/Org"))
    :bind (("C-c p" . 'org-roam-node-find)
	   ("C-c t" . 'org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode))
    ;; (global-set-key (kbd "C-c p") 'org-roam-node-find))
#+END_SRC

** Org-modern
#+BEGIN_SRC emacs-lisp
  (use-package org-modern)
;    :hook ((org-mode . org-modern-mode)))
#+END_SRC

* UI
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'modus-vivendi t)  
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
#+END_SRC
